<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8" />
		<title>PHP编码规范</title>
		<style>
			/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}
sup {
   vertical-align: super;
   font-size: smaller;
}

sub {
  vertical-align: sub;
  font-size: smaller;
}

/* Generic styles */
body {
	background: #f5f5f5;
  color: #444;
  font-family: 'Microsoft Yahei','Book Antiqua',Palatino,FreeSerif,serif;
  font-size: 16px;
  margin: 0;
  padding: 0;
}

h1, h2, h3, h4, h5, h6,
code, pre,
ul, ol,
p,
hr {
  margin: 1.5em 0 0.5em 0;
}
h1, h2, h3, h4, h5, h6 {
  line-height: 1.5em;
}

ul, ol,
p,
hr {
	line-height: 2em;
}

code, pre {
  line-height: 1.5em;
}

*:first-child {
	margin-top: 0;
}

/* Headers */
h1, h2, h3, h4, h5, h6 {
	font-weight: bold;
}

h1 {
	font-size: 3.5em;
}

h2 {
	font-size: 2.5em;
}

h3 {
	font-size: 2em;
}

h4 {
	font-size: 1.5em
}

h5 {
	font-size: 1.2em;
}

h6 {
	font-size: 1em;
}

/* Lists */
ul, ol {
	padding-left: 2em;
}

ul {
	list-style-type: disc;	
}

ol {
	list-style-type: decimal;
}

/* Code and pre */
code, pre {
	font-family: "Bitstream Vera Sans Mono", "Courier", monospace;
}
code {
	background: none repeat scroll 0 0 #F8F8FF;
  border: 1px solid #DEDEDE;
  border-radius: 3px 	;
  padding: 0 0.2em;
}
pre {
	border-left: 5px solid #eee;
	margin-left: 2em;	
	padding-left: 1em;
}
pre > code {
	background: transparent;
	border: none;
	padding: 0;
  word-wrap: break-word;
}

/* Links */
a {
  color: #e91e63;
}

a:visited {
  color: #666;
}

/* Inlines */
strong {
	font-weight: bold;
}

em {
	font-style: italic;
}

/* Container */
.container {
	background: #FFF;
	padding: 30px 50px;
	margin: 0 auto;
	width: 700px;
}

		</style>
	</head>
	<body>
		<div class="container">
			<h2 id="php-">PHP编码规范</h2>
<p>文件编码统一为：<strong>UTF-8</strong>，请开发人员调整编辑器的文件编码为UTF-8，并关闭UTF-8 BOM的功能。请不要使用windows自带的记事本编辑项目文件。</p>
<h3 id="-">命名规范</h3>
<h4 id="-">通用命名规范</h4>
<p>确保文件的命名和调用大小写一致；<br>确保类的命名空间地址和所在的路径地址一致；</p>
<h4 id="-">类命名</h4>
<p>使用<strong>大驼峰法</strong>命名，即每个单词的首字母均大写；</p>
<pre><code>class SimpleDB{

}
</code></pre><p>类名和文件名一致（包括上面说的大小写一致），例如 UserController类的文件命名是UserController.class.php， InfoModel类的文件名是InfoModel.class.php， 并且不同的类库的类命名有一定的规范。</p>
<h4 id="-">函数命名</h4>
<p>函数的命名使用小写字母和下划线的方式，例如 get_client_ip；</p>
<pre><code>public function get_client_ip(){

}

public function __construct($download_path = &#39;&#39;){

}
</code></pre><h4 id="-">方法命名</h4>
<p>方法的命名使用小驼峰法，即首字母小写或者使用下划线“_”，例如 getUserName，_parseType，通常下划线开头的方法属于私有方法；；</p>
<pre><code>public function getUserName(){

}
</code></pre><h4 id="-">属性命名</h4>
<p>属性的命名使用小写字母和下划线的方式，例如 table_name、_instance，通常下划线开头的属性属于私有属性；</p>
<p>  private $table_name;</p>
<h4 id="-">变量命名</h4>
<p>变量命名使用小写字母和下划线的方式，例如 $user_profile（为了与前端表单name的命名统一起来）。</p>
<p>如为私有变量，请在变量名前方加上下划线。</p>
<pre><code>private $_config;
</code></pre><h4 id="-">对象命名</h4>
<p>对象命名使用小写字母和下划线的方式，实例化API和模型后在后面加后缀，例如 $item_api</p>
<pre><code>$item_api = new ItemApi;
$member_model = D(&#39;Member&#39;);
</code></pre><h4 id="-">常量命名</h4>
<p>常量以大写字母和下划线命名，例如 <code>HAS_ONE</code>和 <code>MANY_TO_MANY</code>；</p>
<h4 id="-">配置参数</h4>
<p>配置参数以大写字母和下划线命名，例如<code>HTML_CACHE_ON</code>；</p>
<h4 id="-">数据表和字段命名</h4>
<p>数据表和字段采用小写加下划线方式命名，并注意字段名不要以下划线开头，例如 <code>think_user</code> 表和 <code>user_name</code></p>
<h3 id="-">注释规范</h3>
<h4 id="-">文件头部注释</h4>
<p>文件头部注释主要用来阐述此文件的作用，作者，版本。按照以下形式书写：</p>
<pre><code>&lt;?php
/**
 * 用户认证模型 - 数据对象模型
 * @version 2014091512
 * @author Max.Yu &lt;max@winhu.com&gt;
 */
</code></pre><p>其中@author为作者的名称，后面&lt;&gt;中为电子邮箱；@version规则为：yyyyMMDDHH。</p>
<p>单行注释，使用如下形式，其中//后面没有空格：</p>
<pre><code>//更新用户头像
$this-&gt;saveAvatar();
</code></pre><p>多行注释，使用如下形式：</p>
<pre><code>/**
 * Cookie 设置、获取、清除 (支持数组或对象直接设置)
 * 1 获取cookie: cookie(&#39;name&#39;)
 * 2 清空当前设置前缀的所有cookie: cookie(null)
 * 3 删除指定前缀所有cookie: cookie(null,&#39;think_&#39;) | 注：前缀将不区分大小写
 * 4 设置cookie: cookie(&#39;name&#39;,&#39;value&#39;) | 指定保存时间: cookie(&#39;name&#39;,&#39;value&#39;,3600)
 * 5 删除cookie: cookie(&#39;name&#39;,null)
 * $option 可用设置prefix,expire,path,domain
 * 支持数组形式:cookie(&#39;name&#39;,&#39;value&#39;,array(&#39;expire&#39;=&gt;1,&#39;prefix&#39;=&gt;&#39;think_&#39;))
 * 支持query形式字符串:cookie(&#39;name&#39;,&#39;value&#39;,&#39;prefix=tp_&amp;expire=10000&#39;)
 * 2010-1-17 去掉自动序列化操作，兼容其他语言程序。
 */
</code></pre><h4 id="-">类(接口)注释</h4>
<p>一个类(接口)在声明的时候必须声明其作用。</p>
<pre><code>/**
 * 功能升级类
 * 功能1：
 * 功能2：
 * @version 2014091512
 * @author Max.Yu &lt;max@winhu.com&gt;
 */
class Image{

}
</code></pre><p>注释第一行声明类的作用，后面为类实现的主要功能；@author为作者的名称，后面&lt;&gt;中为电子邮箱；@version规则为：yyyyMMDDHH。</p>
<h4 id="-">函数和方法注释</h4>
<p>函数和方法的注释包括函数作用、参数和返回值和作者。注意如果是无返回的函数，必须指明@return void。</p>
<pre><code>/**
 * 获取语言配置内容列表
 * @param array $map 查询条件
 * @return array 语言配置内容列表
 * @author Max.Yu &lt;max@winhu.com&gt;
 */
public function getLangContent($map){

}

/**
 * 更改语言配置内容
 * @param array $data 语言配置内容
 * @param integer $sid 语言资源ID
 * @return integer 是否更改成功，1表示成功；0表示失败
 * @author Max.Yu &lt;max@winhu.com&gt;
 */
public function updateLangData($data, $sid){

}
</code></pre><p>注释第一行声明函数的作用；@param指函数的参数；@return是函数的返回值；@author是作者。</p>
<h4 id="-">程序行间注释</h4>
<p>行间注释采用如下方式：</p>
<pre><code>//更新缓存文件
$this-&gt;createCacheFile($addData[&#39;appname&#39;], $addData[&#39;filetype&#39;]);
</code></pre><h3 id="-">书写规范</h3>
<h4 id="-">对齐和缩进</h4>
<p>每个缩进的单位约定是2个空格，请每个开发人员在编辑器(UltraEdit、EditPlus、Eclipse、Sublime Text等)中进行设定，以防在编写代码时遗忘而造成格式上的不规范。</p>
<h4 id="-if-switch">大括号{}、if和switch</h4>
<p>首括号 { 与关键词同行，尾括号 } 与关键字同列；</p>
<pre><code>if($condition){
  switch($var){
    case 1: echo &#39;var is 1&#39;; break;
    case 2: echo &#39;var is 2&#39;; break;
    default: echo &#39;var is neither 1 or 2&#39;; break;
  }
}
</code></pre><p>if结构中，else和elseif与前后两个大括号同行，左右无空格。另外，即便if后只有一行语句，仍然需要加入大括号，以保证结构清晰；</p>
<pre><code>if($condition){
  $var++;
}else{
  $var--;
}
</code></pre><p>switch结构中，通常当一个case块处理后，将跳过之后的case块处理，因此大多数情况下需要添加break。break的位置视程序逻辑，与case同在一行，或新起一行均可，但同一switch体中，break的位置格式应当保持一致。</p>
<pre><code>if($condition){
  switch($var){
    case 1: echo &#39;var is 1&#39;; break;
    case 2: echo &#39;var is 2&#39;; break;
    default: echo &#39;var is neither 1 or 2&#39;; break;
  }
}else{
  switch($str){
    case &#39;abc&#39;:
      $result = &#39;abc&#39;;
      break;
    default:
      $result = &#39;unknown&#39;;
      break;
  }
}
</code></pre><h4 id="-">运算符、小括号、关键词和函数</h4>
<p>每个运算符与两边参与运算的值或表达式中间要有一个空格，唯一的特例是字符连接运算符号 . 两边不加空格；</p>
<pre><code>$result = (($a + 1) * 3 / 2 + $num)).&#39;Test&#39;;
$condition ? func1($var) : func2($var);
</code></pre><p>左括号 ( 应和函数关键词紧贴在一起；右括号 ) 除后面是 ) 或者 . 以外，其他一律用空格隔开它们；</p>
<pre><code>function fun1($var1, $var2){

}

exit(json_encode($data));
</code></pre><p>每段较大的程序体，上、下应当加入空白行，两个程序块之间只使用1个空行，禁止使用多行。少于15行的程序块，可不加上下空白行。</p>
<h4 id="-">函数的缩进</h4>
<p>1.函数参数的命名和变量的命名规范一致；<br>2.函数定义中的左小括号 ( ，与函数名紧挨，中间无需空格；<br>3.开始的左大括号与函数定义为同一行，中间不加空格，不要另起一行；<br>4.具有默认值的参数应该位于参数列表的后面；<br>5.函数调用与定义的时候参数与参数之间必须加入一个空格；<br>6.必须仔细检查并切实杜绝函数起始缩进位置与结束缩进位置不同的现象；  </p>
<p>符合规范的定义：</p>
<pre><code>public function index($string, $operation, $key = &#39;&#39;){
  //函数体
}
</code></pre><p>不符合规范的定义：</p>
<pre><code>public function authcode ($string,$key=&#39;&#39;,$operation)
{
  //函数体
}
</code></pre><h4 id="-">引号</h4>
<p>PHP中单引号和双引号具有不同的含义，最大的几项区别如下：<br>1.单引号中，任何变量($var)、特殊转义字符(如 \t \r \n 等)    不会被解析，因此PHP的解析速度更快，转义字符仅仅支持 \&#39; 和 \ 这样对单引号和反斜杠本身的转义；<br>2.双引号中，变量($var)值会代入字符串中，特殊转义字符也会被解析成特定的单个字符，这样虽然程序编写更加方便，但同时PHP的解析也很慢；<br>数组中，如果下标不是整型，而是字符串类型，请务必用单引号将下标括起，正确的写法为$array[&#39;key&#39;]，而不是$array[key]；因为不正确的写法会使PHP解析器认为key是一个常量，进而先判断常量是否存在，不存在时才以 key 作为下标带入表达式中，同时出发错误事件，产生一条Notice级错误。<br>3.因此，在绝大多数可以使用单引号的场合，禁止使用双引号。    </p>
<p>依据上述分析，可以或必须使用单引号的情况包括但不限于下述：<br>1.字符串为固定值，不包含 <code>\t</code> 等特殊转义字符；<br>2.数组的固定下标，例如：<code>$array[&#39;key&#39;];</code>；<br>3.表达式中不需要带入变量，例如：<code>$string = &#39;test&#39;;</code>， 而非：<code>$string = &quot;test$var&quot;;</code></p>

		</div>

		<script></script>
	</body>
</html>
